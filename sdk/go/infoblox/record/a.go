// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package record

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type A struct {
	pulumi.CustomResourceState

	Comment  pulumi.StringPtrOutput `pulumi:"comment"`
	Ipv4addr pulumi.StringOutput    `pulumi:"ipv4addr"`
	Name     pulumi.StringOutput    `pulumi:"name"`
	Ttl      pulumi.IntPtrOutput    `pulumi:"ttl"`
	View     pulumi.StringPtrOutput `pulumi:"view"`
}

// NewA registers a new resource with the given unique name, arguments, and options.
func NewA(ctx *pulumi.Context,
	name string, args *AArgs, opts ...pulumi.ResourceOption) (*A, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ipv4addr == nil {
		return nil, errors.New("invalid value for required argument 'Ipv4addr'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource A
	err := ctx.RegisterResource("infoblox:record:a", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetA gets an existing A resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetA(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AState, opts ...pulumi.ResourceOption) (*A, error) {
	var resource A
	err := ctx.ReadResource("infoblox:record:a", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering A resources.
type aState struct {
}

type AState struct {
}

func (AState) ElementType() reflect.Type {
	return reflect.TypeOf((*aState)(nil)).Elem()
}

type aArgs struct {
	Comment  *string `pulumi:"comment"`
	Ipv4addr string  `pulumi:"ipv4addr"`
	Name     string  `pulumi:"name"`
	Ttl      *int    `pulumi:"ttl"`
	View     *string `pulumi:"view"`
}

// The set of arguments for constructing a A resource.
type AArgs struct {
	Comment  pulumi.StringPtrInput
	Ipv4addr pulumi.StringInput
	Name     pulumi.StringInput
	Ttl      pulumi.IntPtrInput
	View     pulumi.StringPtrInput
}

func (AArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aArgs)(nil)).Elem()
}

type AInput interface {
	pulumi.Input

	ToAOutput() AOutput
	ToAOutputWithContext(ctx context.Context) AOutput
}

func (*A) ElementType() reflect.Type {
	return reflect.TypeOf((**A)(nil)).Elem()
}

func (i *A) ToAOutput() AOutput {
	return i.ToAOutputWithContext(context.Background())
}

func (i *A) ToAOutputWithContext(ctx context.Context) AOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AOutput)
}

// AArrayInput is an input type that accepts AArray and AArrayOutput values.
// You can construct a concrete instance of `AArrayInput` via:
//
//          AArray{ AArgs{...} }
type AArrayInput interface {
	pulumi.Input

	ToAArrayOutput() AArrayOutput
	ToAArrayOutputWithContext(context.Context) AArrayOutput
}

type AArray []AInput

func (AArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*A)(nil)).Elem()
}

func (i AArray) ToAArrayOutput() AArrayOutput {
	return i.ToAArrayOutputWithContext(context.Background())
}

func (i AArray) ToAArrayOutputWithContext(ctx context.Context) AArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AArrayOutput)
}

// AMapInput is an input type that accepts AMap and AMapOutput values.
// You can construct a concrete instance of `AMapInput` via:
//
//          AMap{ "key": AArgs{...} }
type AMapInput interface {
	pulumi.Input

	ToAMapOutput() AMapOutput
	ToAMapOutputWithContext(context.Context) AMapOutput
}

type AMap map[string]AInput

func (AMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*A)(nil)).Elem()
}

func (i AMap) ToAMapOutput() AMapOutput {
	return i.ToAMapOutputWithContext(context.Background())
}

func (i AMap) ToAMapOutputWithContext(ctx context.Context) AMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AMapOutput)
}

type AOutput struct{ *pulumi.OutputState }

func (AOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**A)(nil)).Elem()
}

func (o AOutput) ToAOutput() AOutput {
	return o
}

func (o AOutput) ToAOutputWithContext(ctx context.Context) AOutput {
	return o
}

func (o AOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *A) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o AOutput) Ipv4addr() pulumi.StringOutput {
	return o.ApplyT(func(v *A) pulumi.StringOutput { return v.Ipv4addr }).(pulumi.StringOutput)
}

func (o AOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *A) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *A) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

func (o AOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *A) pulumi.StringPtrOutput { return v.View }).(pulumi.StringPtrOutput)
}

type AArrayOutput struct{ *pulumi.OutputState }

func (AArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*A)(nil)).Elem()
}

func (o AArrayOutput) ToAArrayOutput() AArrayOutput {
	return o
}

func (o AArrayOutput) ToAArrayOutputWithContext(ctx context.Context) AArrayOutput {
	return o
}

func (o AArrayOutput) Index(i pulumi.IntInput) AOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *A {
		return vs[0].([]*A)[vs[1].(int)]
	}).(AOutput)
}

type AMapOutput struct{ *pulumi.OutputState }

func (AMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*A)(nil)).Elem()
}

func (o AMapOutput) ToAMapOutput() AMapOutput {
	return o
}

func (o AMapOutput) ToAMapOutputWithContext(ctx context.Context) AMapOutput {
	return o
}

func (o AMapOutput) MapIndex(k pulumi.StringInput) AOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *A {
		return vs[0].(map[string]*A)[vs[1].(string)]
	}).(AOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AInput)(nil)).Elem(), &A{})
	pulumi.RegisterInputType(reflect.TypeOf((*AArrayInput)(nil)).Elem(), AArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AMapInput)(nil)).Elem(), AMap{})
	pulumi.RegisterOutputType(AOutput{})
	pulumi.RegisterOutputType(AArrayOutput{})
	pulumi.RegisterOutputType(AMapOutput{})
}
