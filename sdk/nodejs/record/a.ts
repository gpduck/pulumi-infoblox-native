// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class A extends pulumi.CustomResource {
    /**
     * Get an existing A resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): A {
        return new A(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:record:a';

    /**
     * Returns true if the given object is an instance of A.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is A {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === A.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly ipv4addr!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly view!: pulumi.Output<string | undefined>;

    /**
     * Create a A resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ipv4addr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv4addr'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["ipv4addr"] = args ? args.ipv4addr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
        } else {
            resourceInputs["comment"] = undefined /*out*/;
            resourceInputs["ipv4addr"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ttl"] = undefined /*out*/;
            resourceInputs["view"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(A.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a A resource.
 */
export interface AArgs {
    comment?: pulumi.Input<string>;
    ipv4addr: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    view?: pulumi.Input<string>;
}
